{"version":3,"sources":["components/App/hooks/useGetCountry.js","graphql/client.js","components/StatesList/index.js","components/Country/index.js","graphql/queries/getCountryCodes.js","components/CountrySelector/index.js","components/Footer/index.js","components/Logo/earth.png","components/Logo/index.js","graphql/queries/getCountry.js","components/LoadingSpinner/index.js","components/App/index.js","index.js"],"names":["timeout","client","ApolloClient","uri","cache","InMemoryCache","StatesList","states","className","map","name","href","encodeURIComponent","Country","capital","code","emoji","continent","currency","role","length","getCountryCodes","gql","CountrySelector","onChange","useQuery","loading","error","response","data","countries","defaultValue","value","disabled","hidden","Footer","title","Logo","src","earth","alt","getCountry","useGetCountry","useState","countryCode","setCountryCode","setLoading","useLazyQuery","variables","makeQuery","fetching","useEffect","clearTimeout","setTimeout","newCountrySelected","useCallback","e","target","LoadingSpinner","Spinner","animation","App","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.d1bfbb46.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport getCountry from \"../../../graphql/queries/getCountry\";\n\nlet timeout;\n\nconst useGetCountry = () => {\n  const [countryCode, setCountryCode] = useState();\n  const [loading, setLoading] = useState();\n\n  const [makeQuery, { loading: fetching, error, data: response }] =\n    useLazyQuery(getCountry, {\n      variables: {\n        countryCode,\n      },\n    });\n\n  useEffect(() => {\n    if (countryCode) {\n      makeQuery({\n        variables: {\n          countryCode,\n        },\n      });\n    }\n  }, [countryCode, makeQuery]);\n\n  useEffect(() => {\n    if (fetching) {\n      clearTimeout(timeout);\n      setLoading(true);\n    } else {\n      timeout = setTimeout(() => {\n        setLoading(false);\n      }, 1500);\n    }\n  }, [fetching]);\n\n  const countryData = response?.countries?.[0];\n\n  const { capital, code, emoji, name, states, continent, currency } =\n    countryData || {};\n\n  const newCountrySelected = useCallback(\n    (e) => setCountryCode(e.target.value),\n    []\n  );\n\n  return {\n    capital,\n    code,\n    emoji,\n    name,\n    states,\n    continent,\n    currency,\n    loading,\n    error,\n    newCountrySelected,\n  };\n};\n\nexport default useGetCountry;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com\",\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import \"./index.css\";\n\nconst StatesList = ({ states }) => (\n  <ul className=\"states-list\">\n    {states.map(({ name }) => (\n      <li key={name} className=\"states-list-item\">\n        <a\n          className=\"states-list-item-link\"\n          href={`https://www.google.com/search?q=${encodeURIComponent(name)}`}\n        >\n          {name}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default StatesList;\n","import React from \"react\";\nimport StatesList from \"../StatesList\";\nimport \"./index.css\";\n\nconst Country = ({\n  capital,\n  code,\n  emoji,\n  name,\n  states,\n  continent,\n  currency,\n}) => {\n  return (\n    <main className=\"country\">\n      <div className=\"name-container\">\n        <div className=\"name-city-container\">\n          <h2 className=\"country-name\">\n            {name} ({code})\n          </h2>\n          <div className=\"data-flag-container\">\n            <ul className=\"country-data\">\n              <li className=\"country-data-item\">\n                Capital City:{\" \"}\n                <span className=\"country-data-item-bold\">{capital}</span>\n              </li>\n              <li className=\"country-data-item\">\n                Continent:{\" \"}\n                <span className=\"country-data-item-bold\">{continent}</span>\n              </li>\n              <li className=\"country-data-item\">\n                Currencies Used:{\" \"}\n                <span className=\"country-data-item-bold\">{currency}</span>\n              </li>\n            </ul>\n            <i role=\"img\" className=\"flag\" aria-label=\"flag emoji\">\n              {emoji}\n            </i>\n          </div>\n        </div>\n      </div>\n      {states?.length > 0 && <StatesList states={states} />}\n    </main>\n  );\n};\n\nexport default Country;\n","import { gql } from \"@apollo/client\";\n\nconst getCountryCodes = gql`\n  query {\n    countries {\n      code\n      name\n      emoji\n    }\n  }\n`;\n\nexport default getCountryCodes;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport getCountryCodes from \"../../graphql/queries/getCountryCodes\";\nimport \"./index.css\";\n\nconst DEFAULT_VALUE = \"\";\n\nconst CountrySelector = ({ onChange }) => {\n  const { loading, error, data: response } = useQuery(getCountryCodes);\n\n  const countries = response?.countries;\n\n  if (error || loading || !countries) return null;\n\n  return (\n    <select\n      className=\"country-selector\"\n      defaultValue={DEFAULT_VALUE}\n      onChange={onChange}\n    >\n      <option value={DEFAULT_VALUE} disabled hidden>\n        Choose here\n      </option>\n      {countries.map(({ code, name, emoji }) => {\n        return (\n          <option key={code} value={code}>\n            {name} ({code}) {emoji}\n          </option>\n        );\n      })}\n    </select>\n  );\n};\n\nexport default CountrySelector;\n","import React from \"react\";\nimport \"./index.css\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <div>\n        Icons made by{\" \"}\n        <a href=\"https://www.freepik.com\" title=\"Freepik\">\n          Freepik\n        </a>{\" \"}\n        from{\" \"}\n        <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n          www.flaticon.com\n        </a>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/earth.cc47e05a.png\";","import React from \"react\";\nimport earth from \"./earth.png\";\nimport \"./index.css\";\n\nconst Logo = () => (\n  <div className=\"logo\">\n    <img className=\"earth\" src={earth} alt=\"planet earth\" />\n    <h1 className=\"app-name\">World Explorer</h1>\n  </div>\n);\n\nexport default Logo;\n","import { gql } from \"@apollo/client\";\n\nconst getCountry = gql`\n  query GetCountry($countryCode: String!) {\n    countries(filter: { code: { regex: $countryCode } }) {\n      code\n      name\n      emoji\n      currency\n      continent {\n        name\n      }\n      capital\n      states {\n        name\n      }\n    }\n  }\n`;\n\nexport default getCountry;\n","import React from \"react\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport \"./index.css\";\n\nconst LoadingSpinner = () => (\n  <div className=\"loading-spinner-container\">\n    <Spinner animation=\"border\" role=\"status\" className=\"loading-spinner\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\n\nexport default LoadingSpinner;\n","import React from \"react\";\nimport Country from \"../Country\";\nimport CountrySelector from \"../CountrySelector\";\nimport Footer from \"../Footer\";\nimport Logo from \"../Logo\";\nimport useGetCountry from \"./hooks/useGetCountry\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport \"./index.css\";\n\nconst App = () => {\n  const {\n    capital,\n    code,\n    emoji,\n    name,\n    states,\n    continent,\n    currency,\n    loading,\n    newCountrySelected,\n  } = useGetCountry();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Logo />\n        <CountrySelector onChange={newCountrySelected} />\n      </header>\n      {!loading && name && emoji && (\n        <Country\n          capital={capital}\n          code={code}\n          continent={continent?.name}\n          emoji={emoji}\n          name={name}\n          states={states}\n          currency={currency}\n        />\n      )}\n      {loading && <LoadingSpinner />}\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport client from \"./graphql/client\";\n\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}